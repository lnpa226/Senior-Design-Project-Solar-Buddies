#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_TFTLCD.h> // Hardware-specific library
#include <TouchScreen.h>
//
#if defined(__SAM3X8E__)
    #undef __FlashStringHelper::F(string_literal)
    #define F(string_literal) string_literal
#endif

// When using the BREAKOUT BOARD only, use these 8 data lines to the LCD:
// For the Arduino Uno, Duemilanove, Diecimila, etc.:
//   D0 connects to digital pin 8  (Notice these are
//   D1 connects to digital pin 9   NOT in order!)
//   D2 connects to digital pin 2
//   D3 connects to digital pin 3
//   D4 connects to digital pin 4
//   D5 connects to digital pin 5
//   D6 connects to digital pin 6
//   D7 connects to digital pin 7

#define YP A3  // must be an analog pin, use "An" notation!
#define XM A2  // must be an analog pin, use "An" notation!
#define YM 9   // can be a digital pin
#define XP 8   // can be a digital pin

#define TS_MINX 150
#define TS_MINY 120
#define TS_MAXX 920
#define TS_MAXY 940

// For better pressure precision, we need to know the resistance
// between X+ and X- Use any multimeter to read it
// For the one we're using, its 300 ohms across the X plate
TouchScreen ts = TouchScreen(XP, YP, XM, YM, 300);

#define LCD_CS A3
#define LCD_CD A2
#define LCD_WR 11
#define LCD_RD 10
// optional
#define LCD_RESET A4

// Assign human-readable names to some common 16-bit color values:
#define BLACK   0x0000
#define BLUE    0x001F
#define RED     0xF800
#define GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

#define BOXSIZE 40
#define PENRADIUS 3

#define MINPRESSURE 100
#define MAXPRESSURE 1000

int ONBUTTON = 13;
int BACKLIGHT = 12;

int buttonState = 0;

Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);

//the code above was provided by Adafruit

//initializing pins and variables
int SPC = 14; //the pin number without having to take up the physical A0 pin
int SPV = 15; //""A1
int PSC = 18; //""A4
int PSV = 19; //""A5
  
long SC;
long SV;
long PC;
long PV; 
long G; 
long U;

void setup() {
  
  //provided from Arduino: if analog input pin 5 is unconnected, random analog noise will cause the call to randomSeed() to generate
  //different seed numbers each time the sketch runs.randomSeed() will then shuffle the random function.
  randomSeed(analogRead(5));

  //assign pins as inputs
  //"solar panel current & voltage"
  pinMode(SPC, INPUT);
  pinMode(SPV, INPUT); 
  //"power system current & voltage
  pinMode(PSC, INPUT);
  pinMode(PSV, INPUT);

  pinMode(ONBUTTON, INPUT);
  pinMode(BACKLIGHT, OUTPUT);

  //code provided by Adafruit from here to...
  Serial.begin(9600);
  Serial.println(F("TFT LCD test"));

#ifdef USE_ADAFRUIT_SHIELD_PINOUT
  Serial.println(F("Using Adafruit 2.8\" TFT Arduino Shield Pinout"));
#else
  Serial.println(F("Using Adafruit 2.8\" TFT Breakout Board Pinout"));
#endif

  Serial.print("TFT size is "); Serial.print(tft.width()); Serial.print("x"); Serial.println(tft.height());

  tft.reset();

  uint16_t identifier = tft.readID();

  if(identifier == 0x9325) {
    Serial.println(F("Found ILI9325 LCD driver"));
  } else if(identifier == 0x9328) {
    Serial.println(F("Found ILI9328 LCD driver"));
  } else if(identifier == 0x7575) {
    Serial.println(F("Found HX8347G LCD driver"));
  } else if(identifier == 0x9341) {
    Serial.println(F("Found ILI9341 LCD driver"));
  } else if(identifier == 0x8357) {
    Serial.println(F("Found HX8357D LCD driver"));
  } else {
    Serial.print(F("Unknown LCD driver chip: "));
    Serial.println(identifier, HEX);
    Serial.println(F("If using the Adafruit 2.8\" TFT Arduino shield, the line:"));
    Serial.println(F("  #define USE_ADAFRUIT_SHIELD_PINOUT"));
    Serial.println(F("should appear in the library header (Adafruit_TFT.h)."));
    Serial.println(F("If using the breakout board, it should NOT be #defined!"));
    Serial.println(F("Also if using the breakout, double-check that all wiring"));
    Serial.println(F("matches the tutorial."));
    return;
  }

  tft.begin(identifier);
  
  Serial.print(F("Text                     "));
  
  //here.
}
int i = 0;
void loop() {

  

  buttonState = digitalRead(ONBUTTON);
  if (buttonState == LOW){
    tft.fillScreen(BLACK);
    digitalWrite(BACKLIGHT, LOW);
  }
  if (buttonState == HIGH){
    digitalWrite(BACKLIGHT, HIGH);
    mainMenu();
    
    
  }
  i++;
  //assigns a random number to the variables using a scale (0-1023V) of voltage values Arduino can use
  SC = random(1,1023);
  SV = random(1,1023);
  PC = random(1,1023);
  PV = random(1,1023);

  //calculate power
  G = SC * SV;
  U = PC * PV;

  //mainMenu();

  

}

unsigned long mainMenu() {
  tft.fillScreen(BLACK);

  
  tft.setCursor(0, 0);
  tft.setTextColor(WHITE); tft.setTextSize(2);
  tft.println("Press square to learn more");
  
  
  tft.setCursor(BOXSIZE*2, BOXSIZE*2);
  tft.fillRect(0, BOXSIZE*2, BOXSIZE, BOXSIZE, RED);
  tft.setTextColor(WHITE); tft.setTextSize(2);
  tft.println("Power Generated");

  
  tft.setCursor(BOXSIZE*2, BOXSIZE*4); 
  tft.fillRect(0, BOXSIZE*4, BOXSIZE, BOXSIZE, YELLOW);
  tft.setTextColor(WHITE); tft.setTextSize(2);
  tft.println("Power Used");

  
  tft.setCursor(BOXSIZE*2, BOXSIZE*6); 
  tft.fillRect(0, BOXSIZE*6, BOXSIZE, BOXSIZE, GREEN);
  tft.setTextColor(WHITE); tft.setTextSize(2);
  tft.println("Power Graph");

  for(int count = 0; count < 10000; count++){
    
    TSPoint p = ts.getPoint();
    
    pinMode(XM, OUTPUT);
    pinMode(YP, OUTPUT);
    
    if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
      Serial.print("X = "); Serial.print(p.x);
      Serial.print("\tY = "); Serial.print(p.y);
      Serial.print("\tPressure = "); Serial.println(p.z);
      if(200 < p.y && p.y < 280){
        powerGenerated();
      }
      else if(340 < p.y && p.y < 420){
        powerUsed();
      }
      else if(510 < p.y && p.y < 590){
        powerGraph();
      }
    }
  }
  
   

}

unsigned long powerGenerated() {
      tft.fillScreen(BLACK);
      
      
      tft.setCursor(0, 0);
      tft.setTextColor(WHITE);  tft.setTextSize(2);
      tft.println("Solar Panel Current: ");

    
      tft.setCursor(BOXSIZE*6, 0);
      tft.setTextColor(WHITE);  tft.setTextSize(2);
      tft.println(SC); 

      
      tft.setCursor(0, BOXSIZE);
      tft.setTextColor(WHITE);  tft.setTextSize(2);
      tft.println("Solar Panel Voltage: ");


      tft.setCursor(BOXSIZE*6, BOXSIZE);
      tft.setTextColor(WHITE);  tft.setTextSize(2);
      tft.println(SV);

   
      tft.setCursor(0, BOXSIZE*2);
      tft.setTextColor(RED);  tft.setTextSize(3);
      tft.println("Power Generated: ");


      tft.setCursor(BOXSIZE*3, BOXSIZE*4);
      tft.setTextColor(RED);  tft.setTextSize(3);
      tft.println(G);


      tft.setCursor(BOXSIZE*2, BOXSIZE*8);

      tft.fillRect(0, BOXSIZE*8, BOXSIZE, BOXSIZE, WHITE);
      tft.setTextColor(WHITE); tft.setTextSize(2);
      tft.println("Return to main menu");
      delay(1000);

      for(int count = 0; count < 10000; count++){
    
        TSPoint p = ts.getPoint();
        
        pinMode(XM, OUTPUT);
        pinMode(YP, OUTPUT);
        
        if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
          Serial.print("X = "); Serial.print(p.x);
          Serial.print("\tY = "); Serial.print(p.y);
          Serial.print("\tPressure = "); Serial.println(p.z);
          mainMenu();
          
        }
      }

}

unsigned long powerUsed() {
      tft.fillScreen(BLACK);
      
      tft.setCursor(0, 0);
      tft.setTextColor(WHITE);  tft.setTextSize(2);
      tft.println("Power System Current: ");

      
      tft.setCursor(BOXSIZE*6, 0);
      tft.setTextColor(WHITE);  tft.setTextSize(2);
      tft.println(PC); 

   
      tft.setCursor(0, BOXSIZE);
      tft.setTextColor(WHITE);  tft.setTextSize(2);
      tft.println("Power System Voltage: ");

     
      tft.setCursor(BOXSIZE*6, BOXSIZE);
      tft.setTextColor(WHITE);  tft.setTextSize(2);
      tft.println(PV);

     
      tft.setCursor(0, BOXSIZE*2);
      tft.setTextColor(YELLOW);  tft.setTextSize(3);
      tft.println("Power Used: ");

      
      tft.setCursor(BOXSIZE*3, BOXSIZE*4);
      tft.setTextColor(YELLOW);  tft.setTextSize(3);
      tft.println(U);

    
      tft.setCursor(BOXSIZE*2, BOXSIZE*8);

      tft.fillRect(0, BOXSIZE*8, BOXSIZE, BOXSIZE, WHITE);
      tft.setTextColor(WHITE); tft.setTextSize(2);
      tft.println("Return to main menu");

      for(int count = 0; count < 10000; count++){
    
        TSPoint p = ts.getPoint();
        
        pinMode(XM, OUTPUT);
        pinMode(YP, OUTPUT);
        
        if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
          Serial.print("X = "); Serial.print(p.x);
          Serial.print("\tY = "); Serial.print(p.y);
          Serial.print("\tPressure = "); Serial.println(p.z);
          mainMenu();
          
        }
      }
}

unsigned long powerGraph() {
  tft.fillScreen(BLACK);
      
      tft.setCursor(0, 0);
      tft.setTextColor(GREEN);  tft.setTextSize(2);
      tft.println("Monthly Power Graphic ");

      tft.setCursor(BOXSIZE*2, BOXSIZE*8);

      tft.fillRect(0, BOXSIZE*8, BOXSIZE, BOXSIZE, WHITE);
      tft.setTextColor(WHITE); tft.setTextSize(2);
      tft.println("Return to main menu");

      for(int count = 0; count < 10000; count++){
    
        TSPoint p = ts.getPoint();
        
        pinMode(XM, OUTPUT);
        pinMode(YP, OUTPUT);
        
        if (p.z > MINPRESSURE && p.z < MAXPRESSURE) {
          Serial.print("X = "); Serial.print(p.x);
          Serial.print("\tY = "); Serial.print(p.y);
          Serial.print("\tPressure = "); Serial.println(p.z);
          mainMenu();
          
        }
      }
}
